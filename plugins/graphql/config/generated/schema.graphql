type Contest {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  fee: String!
  startTime: DateTime!
  event: Event
  participant: Participant
}

type ContestAggregator {
  count: Int
}

type ContestConnection {
  values: [Contest]
  groupBy: ContestGroupBy
  aggregate: ContestAggregator
}

type ContestConnection_id {
  key: ID
  connection: ContestConnection
}

type ContestConnectionCreatedAt {
  key: DateTime
  connection: ContestConnection
}

type ContestConnectionEvent {
  key: ID
  connection: ContestConnection
}

type ContestConnectionFee {
  key: String
  connection: ContestConnection
}

type ContestConnectionName {
  key: String
  connection: ContestConnection
}

type ContestConnectionParticipant {
  key: ID
  connection: ContestConnection
}

type ContestConnectionStartTime {
  key: DateTime
  connection: ContestConnection
}

type ContestConnectionUpdatedAt {
  key: DateTime
  connection: ContestConnection
}

type ContestGroupBy {
  _id: [ContestConnection_id]
  createdAt: [ContestConnectionCreatedAt]
  updatedAt: [ContestConnectionUpdatedAt]
  name: [ContestConnectionName]
  fee: [ContestConnectionFee]
  startTime: [ContestConnectionStartTime]
  event: [ContestConnectionEvent]
  participant: [ContestConnectionParticipant]
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

enum ENUM_PARTICIPANT_COUNTRY {
  de
}

enum ENUM_PARTICIPANT_GENDER {
  male
  female
}

type Event {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  headline: String
  contests(sort: String, limit: Int, start: Int, where: JSON): [Contest]
}

type EventAggregator {
  count: Int
}

type EventConnection {
  values: [Event]
  groupBy: EventGroupBy
  aggregate: EventAggregator
}

type EventConnection_id {
  key: ID
  connection: EventConnection
}

type EventConnectionCreatedAt {
  key: DateTime
  connection: EventConnection
}

type EventConnectionHeadline {
  key: String
  connection: EventConnection
}

type EventConnectionName {
  key: String
  connection: EventConnection
}

type EventConnectionUpdatedAt {
  key: DateTime
  connection: EventConnection
}

type EventGroupBy {
  _id: [EventConnection_id]
  createdAt: [EventConnectionCreatedAt]
  updatedAt: [EventConnectionUpdatedAt]
  name: [EventConnectionName]
  headline: [EventConnectionHeadline]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = Contest | ContestConnection | ContestAggregator | ContestGroupBy | ContestConnection_id | ContestConnectionCreatedAt | ContestConnectionUpdatedAt | ContestConnectionName | ContestConnectionFee | ContestConnectionStartTime | ContestConnectionEvent | ContestConnectionParticipant | Event | EventConnection | EventAggregator | EventGroupBy | EventConnection_id | EventConnectionCreatedAt | EventConnectionUpdatedAt | EventConnectionName | EventConnectionHeadline | Participant | ParticipantConnection | ParticipantAggregator | ParticipantAggregatorSum | ParticipantAggregatorAvg | ParticipantAggregatorMin | ParticipantAggregatorMax | ParticipantGroupBy | ParticipantConnection_id | ParticipantConnectionCreatedAt | ParticipantConnectionUpdatedAt | ParticipantConnectionFirstName | ParticipantConnectionLastName | ParticipantConnectionYearOfBirth | ParticipantConnectionGender | ParticipantConnectionStreetName | ParticipantConnectionStreetNumber | ParticipantConnectionZip | ParticipantConnectionCity | ParticipantConnectionCountry | ParticipantConnectionEmail | ParticipantConnectionMobile | ParticipantConnectionContest | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionResetPasswordToken | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Participant {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  yearOfBirth: Int
  gender: ENUM_PARTICIPANT_GENDER
  streetName: String!
  streetNumber: String!
  zip: String
  city: String!
  country: ENUM_PARTICIPANT_COUNTRY!
  email: String!
  mobile: String
  contest: Contest
}

type ParticipantAggregator {
  count: Int
  sum: ParticipantAggregatorSum
  avg: ParticipantAggregatorAvg
  min: ParticipantAggregatorMin
  max: ParticipantAggregatorMax
}

type ParticipantAggregatorAvg {
  yearOfBirth: Float
}

type ParticipantAggregatorMax {
  yearOfBirth: Float
}

type ParticipantAggregatorMin {
  yearOfBirth: Float
}

type ParticipantAggregatorSum {
  yearOfBirth: Float
}

type ParticipantConnection {
  values: [Participant]
  groupBy: ParticipantGroupBy
  aggregate: ParticipantAggregator
}

type ParticipantConnection_id {
  key: ID
  connection: ParticipantConnection
}

type ParticipantConnectionCity {
  key: String
  connection: ParticipantConnection
}

type ParticipantConnectionContest {
  key: ID
  connection: ParticipantConnection
}

type ParticipantConnectionCountry {
  key: String
  connection: ParticipantConnection
}

type ParticipantConnectionCreatedAt {
  key: DateTime
  connection: ParticipantConnection
}

type ParticipantConnectionEmail {
  key: String
  connection: ParticipantConnection
}

type ParticipantConnectionFirstName {
  key: String
  connection: ParticipantConnection
}

type ParticipantConnectionGender {
  key: String
  connection: ParticipantConnection
}

type ParticipantConnectionLastName {
  key: String
  connection: ParticipantConnection
}

type ParticipantConnectionMobile {
  key: String
  connection: ParticipantConnection
}

type ParticipantConnectionStreetName {
  key: String
  connection: ParticipantConnection
}

type ParticipantConnectionStreetNumber {
  key: String
  connection: ParticipantConnection
}

type ParticipantConnectionUpdatedAt {
  key: DateTime
  connection: ParticipantConnection
}

type ParticipantConnectionYearOfBirth {
  key: Int
  connection: ParticipantConnection
}

type ParticipantConnectionZip {
  key: String
  connection: ParticipantConnection
}

type ParticipantGroupBy {
  _id: [ParticipantConnection_id]
  createdAt: [ParticipantConnectionCreatedAt]
  updatedAt: [ParticipantConnectionUpdatedAt]
  firstName: [ParticipantConnectionFirstName]
  lastName: [ParticipantConnectionLastName]
  yearOfBirth: [ParticipantConnectionYearOfBirth]
  gender: [ParticipantConnectionGender]
  streetName: [ParticipantConnectionStreetName]
  streetNumber: [ParticipantConnectionStreetNumber]
  zip: [ParticipantConnectionZip]
  city: [ParticipantConnectionCity]
  country: [ParticipantConnectionCountry]
  email: [ParticipantConnectionEmail]
  mobile: [ParticipantConnectionMobile]
  contest: [ParticipantConnectionContest]
}

type Query {
  contest(id: ID!): Contest
  contests(sort: String, limit: Int, start: Int, where: JSON): [Contest]
  contestsConnection(sort: String, limit: Int, start: Int, where: JSON): ContestConnection
  event(id: ID!): Event
  events(sort: String, limit: Int, start: Int, where: JSON): [Event]
  eventsConnection(sort: String, limit: Int, start: Int, where: JSON): EventConnection
  participant(id: ID!): Participant
  participants(sort: String, limit: Int, start: Int, where: JSON): [Participant]
  participantsConnection(sort: String, limit: Int, start: Int, where: JSON): ParticipantConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
}

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionResetPasswordToken {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  resetPasswordToken: [UsersPermissionsUserConnectionResetPasswordToken]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
